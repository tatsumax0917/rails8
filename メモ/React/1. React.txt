※前提:node, yarnを使えるようにしておく


1. railsでreactを扱えるようにする

yarn add react react-dom


2. railsのcontrollerを作成（Rails 側の MVC は1つだけあれば十分）
rails g controller home index


3. （任意）config/routes.rb を編集
root 'home#index'


4. view/layout/application.html.erbにReactの入口を追加
<body>
  // ↓これ追加
  <div id="root"></div>
  <%= yield %>
</body>
 

5. app/javascript/application.jsをapplication.jsxに変更

import React from 'react';
import { createRoot } from 'react-dom/client';

function App() {
  return (
    <h1>Hello React!</h1>
  )
}

const root = document.getElementById('root');
if (!root) {
  throw new Error('No root element');
}
createRoot(root).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


6. app/views/home/index.html.erbの中身は空に


7. package.jsonに--loader:.jsx=jsxを追加して認識させる

"scripts": {
  "build": "yarn Tbuild:js",
  "build:js": "esbuild app/javascript/*.* --bundle --sourcemap --format=esm --outdir=app/assets/builds --public-path=/assets --loader:.jsx=jsx ",
},


※このように --loader:.jsx=jsxを追加する
※どっちでもいいけど、本番用と開発中--watchありとなしを作っておくといいかも（もし動かない場合は作ろう）



8.Procfile.dev(参考)

web: bin/rails server -b 0.0.0.0 -p 3000
js: yarn build:js

(※--watchはpackage.jsonのscriptでするのが本来らしい)



9. （任意）プロジェクトルートに jsconfig.json 作っておくと便利

{
  "compilerOptions": {
    "baseUrl": "app/javascript",  // ルートディレクトリを指定
    "paths": {
      "@/*": ["*"]  // "@"をapp/javascriptのエイリアスとして設定
    }
  }
}

とすると'@/components/Hello'みたいに読み込める
@はbaseUrl



